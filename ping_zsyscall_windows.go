// Code generated by 'go generate'; DO NOT EDIT.

package tun

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modiphlpapi = windows.NewLazySystemDLL("iphlpapi.dll")

	procIcmp6CreateFile  = modiphlpapi.NewProc("Icmp6CreateFile")
	procIcmp6SendEcho2   = modiphlpapi.NewProc("Icmp6SendEcho2")
	procIcmpCloseHandle  = modiphlpapi.NewProc("IcmpCloseHandle")
	procIcmpCreateFile   = modiphlpapi.NewProc("IcmpCreateFile")
	procIcmpParseReplies = modiphlpapi.NewProc("IcmpParseReplies")
	procIcmpSendEcho2Ex  = modiphlpapi.NewProc("IcmpSendEcho2Ex")
)

func icmp6CreateFile() (handle windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procIcmp6CreateFile.Addr(), 0, 0, 0, 0)
	handle = windows.Handle(r0)
	if handle == windows.InvalidHandle {
		err = errnoErr(e1)
	}
	return
}

func icmp6SendEcho2(handle windows.Handle, event windows.Handle, apcRoutine uintptr, apcContext uintptr, sourceAddress *windows.RawSockaddrInet6, destinationAddress *windows.RawSockaddrInet6, requestData []byte, requestOptions *IPOptionInformation, replyBuffer []byte, timeout uint32) (err error) {
	var _p0 *byte
	if len(requestData) > 0 {
		_p0 = &requestData[0]
	}
	var _p1 *byte
	if len(replyBuffer) > 0 {
		_p1 = &replyBuffer[0]
	}
	r1, _, e1 := syscall.Syscall12(procIcmp6SendEcho2.Addr(), 12, uintptr(handle), uintptr(event), uintptr(apcRoutine), uintptr(apcContext), uintptr(unsafe.Pointer(sourceAddress)), uintptr(unsafe.Pointer(destinationAddress)), uintptr(unsafe.Pointer(_p0)), uintptr(len(requestData)), uintptr(unsafe.Pointer(requestOptions)), uintptr(unsafe.Pointer(_p1)), uintptr(len(replyBuffer)), uintptr(timeout))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func icmpCloseHandle(icmpHandle windows.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procIcmpCloseHandle.Addr(), 1, uintptr(icmpHandle), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func icmpCreateFile() (handle windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procIcmpCreateFile.Addr(), 0, 0, 0, 0)
	handle = windows.Handle(r0)
	if handle == windows.InvalidHandle {
		err = errnoErr(e1)
	}
	return
}

func icmpParseReplies(replyBuffer []byte) (replies uint32, err error) {
	var _p0 *byte
	if len(replyBuffer) > 0 {
		_p0 = &replyBuffer[0]
	}
	r0, _, e1 := syscall.Syscall(procIcmpParseReplies.Addr(), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(replyBuffer)), 0)
	replies = uint32(r0)
	if replies == 0 {
		err = errnoErr(e1)
	}
	return
}

func icmpSendEcho2Ex(handle windows.Handle, event windows.Handle, apcRoutine uintptr, apcContext uintptr, sourceAddress *[4]byte, destinationAddress *[4]byte, requestData []byte, requestOptions *IPOptionInformation, replyBuffer []byte, timeout uint32) (err error) {
	var _p0 *byte
	if len(requestData) > 0 {
		_p0 = &requestData[0]
	}
	var _p1 *byte
	if len(replyBuffer) > 0 {
		_p1 = &replyBuffer[0]
	}
	r1, _, e1 := syscall.Syscall12(procIcmpSendEcho2Ex.Addr(), 12, uintptr(handle), uintptr(event), uintptr(apcRoutine), uintptr(apcContext), uintptr(unsafe.Pointer(sourceAddress)), uintptr(unsafe.Pointer(destinationAddress)), uintptr(unsafe.Pointer(_p0)), uintptr(len(requestData)), uintptr(unsafe.Pointer(requestOptions)), uintptr(unsafe.Pointer(_p1)), uintptr(len(replyBuffer)), uintptr(timeout))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
